파일 이름 : stl.cpp, 파일 크기 : 1860
저장 시간 : 2022-03-02 13:16:36 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 2 수34						월23 수34				(1주 1일)
// 
// - 강의소개 (책, cppreference.com)
// - 코딩 스타일 -> Google c++ style guide 참고
// - 컴파일 환경 세팅 - Release, x64   (시험에도 명시해둘 예정)
// 	 			      - 메뉴, 프로젝트 - 속성 - 최신 C++ 초안의 기능
// - save 파일 작성 (한학기 강의 내용을 자동저장 한다)
// 
// 공부해야 할 내용 - 파일 입출력(텍스트/바이너리 모드)
//-----------------------------------------------------------------------------


#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{
	//std::cout << "string의 크기 - " << sizeof(std::string) << std::endl;
	//std::cout << "string_view의 크기 - " << sizeof(std::string_view) << std::endl;

	save("stl.cpp");
}

void save(std::string_view file_name) 
{
	// 현재 시간을 화면에 출력한다.
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());

	// 읽을 파일을 연다.
	std::ifstream in{ file_name.data() };

	// 저장할 파일도 덧붙이기 모드로 연다.
	std::ofstream out{ "2022 STL 월23수34 강의.txt", std::ios::app };

	// 저장할 파일의 크기와 현재 시간을 파일에 기록한다.
	out << "파일 이름 : " << file_name  << ", 파일 크기 : " << std::filesystem::file_size(file_name) << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << std::endl;

	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 벡터로 읽어온 파일을 출력 파일로 내보낸다.
	
	copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}
파일 이름 : stl.cpp, 파일 크기 : 554
저장 시간 : 2022-03-07 10:39:05 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 2 수34						월23 수34				(1주 1일)
// 
// save 함수를 분리하자
//-----------------------------------------------------------------------------

#include "save.h"

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{
	//std::cout << "string의 크기 - " << sizeof(std::string) << std::endl;
	//std::cout << "string_view의 크기 - " << sizeof(std::string_view) << std::endl;

	save("stl.cpp");
}파일 이름 : stl.cpp, 파일 크기 : 575
저장 시간 : 2022-03-07 10:40:07 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 2 수34						월23 수34				(1주 1일)
// 
// save 함수를 분리하자
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{
	//std::cout << "string의 크기 - " << sizeof(std::string) << std::endl;
	//std::cout << "string_view의 크기 - " << sizeof(std::string_view) << std::endl;

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 432
저장 시간 : 2022-03-07 10:47:19 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 7 월23						월23 수34				(1주 2일)
// 
// 할 일 - save 함수를 분리하자
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{

	save("stl.cpp");
}

// [문제] main의 코드를 변경하면 안된다
// a와 b의 값이 바뀌어야 한다.

void change(int &a, int &b)
{
	int temp{ a };
	a = b;
	b = temp;
}


int main()
{
	int a{ 1 };
	int b{ 2 };

	change(a, b);
	std::cout << a << ", " << b << std::endl;

	//save("save.cpp");
}


#include <iostream>
//#include "save.h"

// [문제] main의 코드를 변경하면 안된다
// a와 b의 값이 바뀌어야 한다.

class Dog
{
public:
	Dog(int num) : number(num) {}
	~Dog() {}

	int getNumber() { return number; }
	void setNumber(int num) { number = num; }


	friend std::ostream& operator<<(std::ostream& out, const Dog& A) {
		out << A.number;
		return out;
	}
		
private:
	int number;
};


void change(Dog &a, Dog &b)
{
	Dog temp{ a.getNumber() };
	a.setNumber(b.getNumber());
	b.setNumber(temp.getNumber());
}


int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);
	std::cout << a << ", " << b << std::endl;

	//save("save.cpp");
}


#include <iostream>
//#include "save.h"

// [문제] main의 코드를 변경하면 안된다
// a와 b의 값이 바뀌어야 한다.

class Dog{
public:
	Dog(int num) : number{ num } {}

	friend std::ostream& operator<<(std::ostream&, const Dog&);
private:
	int number;
};

std::ostream& operator<<(std::ostream& out, const Dog& A) {
	out << A.number;
	return out;
}


void change(Dog &a, Dog &b)
{
	Dog temp{ a };
	a = b; // a.operator=(b);
	b = temp;
}


int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);
	std::cout << a << ", " << b << std::endl;

	//save("save.cpp");
}

파일 이름 : stl.cpp, 파일 크기 : 765
저장 시간 : 2022-03-08 23:17:28 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 7 월23						월23 수34				(1주 2일)
// 
// C++ 복습 - &, class Dog
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include "save.h"

//[문제] 다음 main을 수정없이 실행되는 템플릿 함수를 작성하라

template<class T>
void change(T &a, T &b)
{
	T temp{ a };
	a = b;
	b = temp;
}

class Dog {
public:
	Dog(std::string, int) {}
private:

};

int main()
{
	/*
	int a{ 1 }, b{ 2 };
	change(a, b);

	std::string c = "STL"s;
	std::string d = "C++"s;
	change(c, d);

	Dog e{ "코코"s, 3 };
	Dog f{ "댕댕이"s, 2 };
	change(e, f);
	*/

	save("stl.cpp");
}

파일 이름 : stl.cpp, 파일 크기 : 1177
저장 시간 : 2022-03-08 23:52:27 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 8 월23						월23 수34				(1주 2일)
// 
// C++ 복습 - &, class Dog
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include "save.h"

//[문제] 다음 main을 수정없이 실행되는 템플릿 함수를 작성하라

template<typename T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

class Dog {
public:
	Dog(std::string str, int num) : name{ str }, age{ num } {}
	

	friend std::ostream& operator<<(std::ostream& , const Dog&);
private:
	std::string name;
	int age;
};

std::ostream& operator<<(std::ostream& os, const Dog& dog)
{
	os << "이름 : " << dog.name << ",  나이 : " << dog.age << std::endl;
	return os;
}

int main()
{
	
	int a{ 1 }, b{ 2 };
	change(a, b);

	std::cout << a << ", " << b << std::endl;

	std::string c = "STL";
	std::string d = "C++ Programming";
	change(c, d);

	std::cout << c << ", " << d << std::endl;

	Dog e{ "코코", 3 };
	Dog f{ "댕댕이", 2 };
	change(e, f);
	
	std::cout << e << f << std::endl;

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 686
저장 시간 : 2022-03-14 10:43:16 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include "save.h"

//[문제] 다음 main을 수정없이 실행되는 템플릿 함수를 작성하라

template<typename T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	
	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;
	}
	{
		std::string a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;
	}

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 782
저장 시간 : 2022-03-14 10:51:29 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 지난주 복습
//-----------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include "save.h"

//[문제] 다음 main을 수정없이 실행되는 템플릿 함수를 작성하라

template<typename T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	
	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;
	}
	{
		using namespace std::literals;
		// 스트링 리터럴 정의를 위한 네임스페이스 사용
		std::string a{ "1"s }, b{ "2"s };
		change(a, b);
		std::cout << a << ", " << b << std::endl;
	}

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 1309
저장 시간 : 2022-03-14 11:06:04 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 지난주 복습
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//[문제] 다음 main을 수정없이 실행되는 템플릿 함수를 작성하라

template <typename T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

// 컴파일러는 함수를 읽어들여 위의 template를 만나면 해당 자료형에 맞게 아래처럼
// 함수를 찍어낸다
// 컴파일러의 과정  1. 함수 찍어내기(template), 2. 기계어 변환
//  -> 아래처럼 함수를 먼저 찍어내고 기계어 변환시 오류를 검사함
template <>
void change(int& a, int& b)
{
	std::cout << "템플릿의 특수화" << std::endl;
	int temp{ a };
	a = b;
	b = temp;
}

template <>
void change(std::string& a, std::string& b)
{
	std::cout << "템플릿의 특수화" << std::endl;
	std::string temp{ a };
	a = b;
	b = temp;
}

// -------
int main()
// -------
{
	
	{
		int a{ 1 }, b{ 2 };
		change(a, b);
		std::cout << a << ", " << b << std::endl;
	}
	{
		using namespace std::literals;
		// 스트링 리터럴 정의를 위한 네임스페이스 사용
		std::string a{ "1"s }, b{ "2"s };
		change(a, b);
		std::cout << a << ", " << b << std::endl;
	}

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 795
저장 시간 : 2022-03-14 11:19:18 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// C++ 설명
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

/*
C++ Programming language
C++ Programming Paradigm 5가지
1. Procedural PL
	-> 절차적 언어
2. Object Oriented PL
	-> 객체 지향 언어
3. Generic PL(STL)
	-> 자료형의 관계없이 template을 이용하여 해결 -> 문제해결 방법( 컨테이너, 알고리즘 )
4. Template Meta PL
	-> template를 통해 컴파일시간에 함수를 찍어냄
5. Functional PL
	-> C++, [], filter ...

*/

template <typename T>
void change(T& a, T& b)
{
	T temp{ a };
	a = b;
	b = temp;
}

// -------
int main()
// -------
{

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 539
저장 시간 : 2022-03-14 11:39:44 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 많은 수의 자료를 다루는 연습
// 1. int -> class
//    int 1000개를 파일에 저장하기
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"


// [문제] 임의의(random) int값 1000개를 화면에 출력하라


// -------
int main()
// -------
{
	for (int i = 0; i < 1000; ++i)
		std::cout << rand() << ' ';

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 573
저장 시간 : 2022-03-14 11:41:45 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 많은 수의 자료를 다루는 연습
// 1. int -> class
//    int 1000개를 파일에 저장하기
//-----------------------------------------------------------------------------

#include <iostream>
#include <format>
#include "save.h"


// [문제] 임의의(random) int값 1000개를 화면에 출력하라


// -------
int main()
// -------
{
	// 10글자씩 출력하도록 formatting 함
	for (int i = 0; i < 1000; ++i)
		std::cout << std::format("{:10}", rand());

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 916
저장 시간 : 2022-03-14 12:00:17 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 많은 수의 자료를 다루는 연습
// 1. int -> class
//    int 1000개를 파일에 저장하기
//-----------------------------------------------------------------------------

#include <iostream>
#include <format>
#include "save.h"


// [문제] int의 최대값을 화면에 출력하라
// [문제] 엔진과 분포를 이용하여 임의의(random) int값 1000개를 화면에 출력하라


// -------
int main()
// -------
{
	int num = 0B01111111'11111111'11111111'11111111;
	int n = 0X7FFFFFFF;
	std::cout << num << std::endl;
	std::cout << n << std::endl;
	std::cout << INT_MAX << std::endl;
	
	// int는 기계마다 byte수가 다름, 표준은 2바이트 이상
	// 따라서 다음처럼 numeric 을 통해 자료형의 최댓값을 출력해야함
	std::cout << std::numeric_limits<int>::max << std::endl;

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 945
저장 시간 : 2022-03-14 12:17:15 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 많은 수의 자료를 다루는 연습
// 1. int -> class
//    int 1000개를 파일에 저장하기
//-----------------------------------------------------------------------------

#include <iostream>
#include <format>
#include <random>
#include "save.h"

// random_device는 개개인의 장치의 특성을 활용하여 시드를 생성함
std::random_device rd;
std::default_random_engine dre{ rd() };
std::uniform_int_distribution<int> uid;

// [문제] 엔진과 분포를 이용하여 임의의(random) int값 1000개를 화면에 출력하라
// normal 분포는 시험이나 과제에 나올 예정

// -------
int main()
// -------
{
	// 엔진의 크기가 크기 때문에 스택에 쓰지 말것
	std::cout << "엔진의 크기 - " << sizeof(dre) << std::endl;

	for (int i = 0; i < 1'000; ++i)
		std::cout << std::format("{:15}", uid(dre));
	
	save("stl.cpp");
}
 파일 이름 : stl.cpp, 파일 크기 : 712
저장 시간 : 2022-03-14 12:18:48 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 14 월23						월23 수34				(2주 1일)
// 
// 많은 수의 자료를 다루는 연습
// 1. int -> class
//    int 1000개를 파일에 저장하기
// 
// 숙제 - 파일 입출력 알아보기
//-----------------------------------------------------------------------------

#include <iostream>
#include <random>
#include "save.h"

std::default_random_engine dre;
std::uniform_int_distribution<int> uid;

// [문제] 엔진과 분포를 이용하여 생성한 int값 1000개를
// 파일 "int 1000개.txt"에 저장하라.

// -------
int main()
// -------
{

	for (int i = 0; i < 1'000; ++i)
		std::cout << uid(dre) << "\t";
	
	save("stl.cpp");
}
 