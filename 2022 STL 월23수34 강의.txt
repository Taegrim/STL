파일 이름 : stl.cpp, 파일 크기 : 1860
저장 시간 : 2022-03-02 13:16:36 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 2 수34						월23 수34				(1주 1일)
// 
// - 강의소개 (책, cppreference.com)
// - 코딩 스타일 -> Google c++ style guide 참고
// - 컴파일 환경 세팅 - Release, x64   (시험에도 명시해둘 예정)
// 	 			      - 메뉴, 프로젝트 - 속성 - 최신 C++ 초안의 기능
// - save 파일 작성 (한학기 강의 내용을 자동저장 한다)
// 
// 공부해야 할 내용 - 파일 입출력(텍스트/바이너리 모드)
//-----------------------------------------------------------------------------


#include <iostream>
#include <string_view>
#include <fstream>
#include <filesystem>
#include <vector>
#include <iterator>
#include <chrono>
#include <algorithm>

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{
	//std::cout << "string의 크기 - " << sizeof(std::string) << std::endl;
	//std::cout << "string_view의 크기 - " << sizeof(std::string_view) << std::endl;

	save("stl.cpp");
}

void save(std::string_view file_name) 
{
	// 현재 시간을 화면에 출력한다.
	auto time = floor<std::chrono::seconds>(std::chrono::system_clock::now());

	// 읽을 파일을 연다.
	std::ifstream in{ file_name.data() };

	// 저장할 파일도 덧붙이기 모드로 연다.
	std::ofstream out{ "2022 STL 월23수34 강의.txt", std::ios::app };

	// 저장할 파일의 크기와 현재 시간을 파일에 기록한다.
	out << "파일 이름 : " << file_name  << ", 파일 크기 : " << std::filesystem::file_size(file_name) << std::endl;
	out << "저장 시간 : " << std::chrono::zoned_time("Asia/Seoul", time) << std::endl;
	out << std::endl;

	// 벡터를 만들면서 in 파일의 내용을 다 읽어온다.
	std::vector<char> v{ std::istreambuf_iterator<char>{in}, {} };

	// 벡터로 읽어온 파일을 출력 파일로 내보낸다.
	
	copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}
파일 이름 : stl.cpp, 파일 크기 : 554
저장 시간 : 2022-03-07 10:39:05 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 2 수34						월23 수34				(1주 1일)
// 
// save 함수를 분리하자
//-----------------------------------------------------------------------------

#include "save.h"

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{
	//std::cout << "string의 크기 - " << sizeof(std::string) << std::endl;
	//std::cout << "string_view의 크기 - " << sizeof(std::string_view) << std::endl;

	save("stl.cpp");
}파일 이름 : stl.cpp, 파일 크기 : 575
저장 시간 : 2022-03-07 10:40:07 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 2 수34						월23 수34				(1주 1일)
// 
// save 함수를 분리하자
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{
	//std::cout << "string의 크기 - " << sizeof(std::string) << std::endl;
	//std::cout << "string_view의 크기 - " << sizeof(std::string_view) << std::endl;

	save("stl.cpp");
}
파일 이름 : stl.cpp, 파일 크기 : 432
저장 시간 : 2022-03-07 10:47:19 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 7 월23						월23 수34				(1주 2일)
// 
// 할 일 - save 함수를 분리하자
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// 코딩할 내용 - "stl.cpp" 를 읽어 강의저장 파일에 덧붙인다.

void save( std::string_view );

int main()
{

	save("stl.cpp");
}

// [문제] main의 코드를 변경하면 안된다
// a와 b의 값이 바뀌어야 한다.

void change(int &a, int &b)
{
	int temp{ a };
	a = b;
	b = temp;
}


int main()
{
	int a{ 1 };
	int b{ 2 };

	change(a, b);
	std::cout << a << ", " << b << std::endl;

	//save("save.cpp");
}


#include <iostream>
//#include "save.h"

// [문제] main의 코드를 변경하면 안된다
// a와 b의 값이 바뀌어야 한다.

class Dog
{
public:
	Dog(int num) : number(num) {}
	~Dog() {}

	int getNumber() { return number; }
	void setNumber(int num) { number = num; }


	friend std::ostream& operator<<(std::ostream& out, const Dog& A) {
		out << A.number;
		return out;
	}
		
private:
	int number;
};


void change(Dog &a, Dog &b)
{
	Dog temp{ a.getNumber() };
	a.setNumber(b.getNumber());
	b.setNumber(temp.getNumber());
}


int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);
	std::cout << a << ", " << b << std::endl;

	//save("save.cpp");
}


#include <iostream>
//#include "save.h"

// [문제] main의 코드를 변경하면 안된다
// a와 b의 값이 바뀌어야 한다.

class Dog{
public:
	Dog(int num) : number{ num } {}

	friend std::ostream& operator<<(std::ostream&, const Dog&);
private:
	int number;
};

std::ostream& operator<<(std::ostream& out, const Dog& A) {
	out << A.number;
	return out;
}


void change(Dog &a, Dog &b)
{
	Dog temp{ a };
	a = b; // a.operator=(b);
	b = temp;
}


int main()
{
	Dog a{ 1 };
	Dog b{ 2 };

	change(a, b);
	std::cout << a << ", " << b << std::endl;

	//save("save.cpp");
}

파일 이름 : stl.cpp, 파일 크기 : 765
저장 시간 : 2022-03-08 23:17:28 GMT+9

//-----------------------------------------------------------------------------
// 2022. 3. 7 월23						월23 수34				(1주 2일)
// 
// C++ 복습 - &, class Dog
// 
//-----------------------------------------------------------------------------

#include <iostream>
#include <string_view>
#include "save.h"

//[문제] 다음 main을 수정없이 실행되는 템플릿 함수를 작성하라

template<class T>
void change(T &a, T &b)
{
	T temp{ a };
	a = b;
	b = temp;
}

class Dog {
public:
	Dog(std::string, int) {}
private:

};

int main()
{
	/*
	int a{ 1 }, b{ 2 };
	change(a, b);

	std::string c = "STL"s;
	std::string d = "C++"s;
	change(c, d);

	Dog e{ "코코"s, 3 };
	Dog f{ "댕댕이"s, 2 };
	change(e, f);
	*/

	save("stl.cpp");
}

